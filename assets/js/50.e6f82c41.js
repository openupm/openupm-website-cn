(window.webpackJsonp=window.webpackJsonp||[]).push([[50],{1115:function(e,a,t){"use strict";t.r(a);var s=t(30),r=Object(s.a)({},(function(){var e=this,a=e.$createElement,s=e._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"adding-upm-package"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#adding-upm-package"}},[e._v("#")]),e._v(" Adding UPM Package")]),e._v(" "),s("h2",{attrs:{id:"upm-package-criteria"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#upm-package-criteria"}},[e._v("#")]),e._v(" UPM Package Criteria")]),e._v(" "),s("p",[e._v("OpenUPM requires the package fulfills the below criteria:")]),e._v(" "),s("ul",[s("li",[e._v("The package name should conform to the "),s("a",{attrs:{href:"https://docs.unity3d.com/Manual/cus-naming.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Unity Package Manager naming convention"),s("OutboundLink")],1)]),e._v(" "),s("li",[e._v("The package should comply with "),s("a",{attrs:{href:"https://unity3d.com/legal/terms-of-service/software",target:"_blank",rel:"noopener noreferrer"}},[e._v("Unity Terms"),s("OutboundLink")],1),e._v(" and "),s("a",{attrs:{href:"https://unity.com/legal/terms-of-service/software/package-guidelines",target:"_blank",rel:"noopener noreferrer"}},[e._v("Package Guidelines"),s("OutboundLink")],1),e._v(".")]),e._v(" "),s("li",[e._v("The package should be tested to make sure it works as expected.")]),e._v(" "),s("li",[e._v("The "),s("code",[e._v("package.json")]),e._v(" could be placed at the root path or under a sub-folder.")]),e._v(" "),s("li",[e._v("The package should use an open-source license. It's recommended to choose one from the "),s("a",{attrs:{href:"https://spdx.org/licenses/",target:"_blank",rel:"noopener noreferrer"}},[e._v("spdx license list"),s("OutboundLink")],1),e._v(".")]),e._v(" "),s("li",[e._v("The package should be hosted on Github.")]),e._v(" "),s("li",[e._v("The package should contain versioned Git tags using "),s("a",{attrs:{href:"https://semver.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("semantic versioning (semver)"),s("OutboundLink")],1),e._v(". i.e. "),s("code",[e._v("v1.1.0")]),e._v(", "),s("code",[e._v("1.1.0")]),e._v(", "),s("code",[e._v("1.1.1-preview")]),e._v(", "),s("code",[e._v("v2.0.0-preview.1")]),e._v(". It's recommended to either use the "),s("a",{attrs:{href:"https://help.github.com/en/github/administering-a-repository/creating-releases",target:"_blank",rel:"noopener noreferrer"}},[e._v("GitHub release"),s("OutboundLink")],1),e._v(" page, or the "),s("a",{attrs:{href:"https://medium.com/openupm/how-to-maintain-upm-package-part-2-f352fbf5f87c",target:"_blank",rel:"noopener noreferrer"}},[e._v("CI tools"),s("OutboundLink")],1),e._v(" to create versioned Git tags.")]),e._v(" "),s("li",[e._v("The package size should be less than 512MB.")])]),e._v(" "),s("h2",{attrs:{id:"understanding-different-folder-structures-of-upm-repositories"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#understanding-different-folder-structures-of-upm-repositories"}},[e._v("#")]),e._v(" Understanding Different Folder Structures of UPM Repositories")]),e._v(" "),s("p",[e._v("There're three typical folder structures of UPM repositories. OpenUPM build pipelines can handle all of them.")]),e._v(" "),s("ul",[s("li",[e._v("UPM package at the root path")]),e._v(" "),s("li",[e._v("UPM package at a sub-folder")]),e._v(" "),s("li",[e._v("UPM package at a sub-folder with UPM branch")])]),e._v(" "),s("h3",{attrs:{id:"upm-package-at-the-root-path"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#upm-package-at-the-root-path"}},[e._v("#")]),e._v(" UPM Package at the Root Path")]),e._v(" "),s("p",[e._v("The "),s("code",[e._v("package.json")]),e._v(" file is located at the root path of the master branch. It is the simplest case.")]),e._v(" "),s("h3",{attrs:{id:"upm-package-at-a-sub-folder"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#upm-package-at-a-sub-folder"}},[e._v("#")]),e._v(" UPM Package at a Sub-folder")]),e._v(" "),s("p",[e._v("The master branch is usually a Unity project (with Assets folder). The "),s("code",[e._v("package.json")]),e._v(" file is located at a sub-folder, for example "),s("code",[e._v("Assets/package-name")]),e._v(" or "),s("code",[e._v("Packages/com.namespace.package-name")]),e._v(". Git tags are based on the master branch. Build pipelines will detect the location of the "),s("code",[e._v("package.json")]),e._v(" file, and handle it correctly.")]),e._v(" "),s("h3",{attrs:{id:"upm-package-at-a-sub-folder-with-upm-branch"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#upm-package-at-a-sub-folder-with-upm-branch"}},[e._v("#")]),e._v(" UPM Package at a Sub-folder with UPM Branch")]),e._v(" "),s("p",[e._v("The master branch is usually a Unity project (with Assets folder). The "),s("code",[e._v("package.json")]),e._v(" file is located at a sub-folder, for example "),s("code",[e._v("Assets/package-name")]),e._v(" or "),s("code",[e._v("Packages/com.namespace.package-name")]),e._v(". A "),s("code",[e._v("upm")]),e._v(" branch is created from the package folder using the "),s("code",[e._v("git subtree split/push")]),e._v(" command to make the "),s("code",[e._v("package.json")]),e._v(" file placed at the root path. So the package can be installed by Unity Package Manager via Git URL. Git tags are based on the upm branch.")]),e._v(" "),s("h2",{attrs:{id:"package-yaml-file"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#package-yaml-file"}},[e._v("#")]),e._v(" Package YAML File")]),e._v(" "),s("p",[e._v("OpenUPM uses a YAML file to store the package information. Here's an example.")]),e._v(" "),s("div",{staticClass:"language-yaml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-yaml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# The package name")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" com.namespace.unitypackageexample\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# The package display name")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("displayName")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" Unity Package Example\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# The short package description")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("description")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" An unity package example\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# The repository url")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("repoUrl")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'https://github.com/author/reponame'")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# The forked repository url")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("parentRepoUrl")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token null important"}},[e._v("null")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# The Software Package Data Exchange® (SPDX®) license id")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("licenseSpdxId")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" MIT\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# The license name")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("licenseName")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" MIT License\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# A list of topic slugs")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("topics")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" utilities\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Filtering Git tags based on their prefix. It’s particularly useful for monorepos to distinguish between Git tags. i.e. 'com.example.foo/'.")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("gitTagPrefix")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("''")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# The regular expression that specifies intentionally untracked Git tags that should be ignored")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("gitTagIgnore")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'-master$'")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# The minimal version to build. Leave it blank to build all versions.")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("minVersion")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'1.0.5'")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# The featured image URL. It should point to a valid image URL instead of a web page that presents the image.")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Leave it blank to use the repository’s social image if it exists.")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("image")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'https://github.com/author/reponame/raw/master/path-of-img.png'")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# The featured image fit mode: cover (default) or contain. Learn more at https://developer.mozilla.org/en-US/docs/Web/CSS/object-fit")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("imageFit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" cover\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# The README.md file path (branchname:filename)")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("readme")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'master:README.md'")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# The package hunter's GitHub username")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("hunter")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" author\n")])])]),s("h2",{attrs:{id:"using-package-add-form"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#using-package-add-form"}},[e._v("#")]),e._v(" Using Package Add Form")]),e._v(" "),s("p",[e._v("Package hunters can use the "),s("RouterLink",{attrs:{to:"/packages/add/"}},[e._v("package add form")]),e._v(", to submit the package YAML file. The form will guide you to fill the required information, generate the YAML file, then submit to GitHub as a pull request in the browser.")],1),e._v(" "),s("p",[s("RouterLink",{attrs:{to:"/packages/add/"}},[s("img",{attrs:{src:t(820),alt:"package add form"}})])],1),e._v(" "),s("p",[e._v("The pull request of adding a new package will be merged automatically. The CI will do jobs to update the website and build pipelines. Within a few minutes you can view the package detail page at URL "),s("code",[e._v("/packages/com.namespace.package-name")]),e._v(", and check the build result from the "),s("strong",[e._v("version history")]),e._v(" and "),s("strong",[e._v("build issues")]),e._v(" sections.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("+--------------+      +--------------+      +---------+\n| Package Form | +--\x3e | Pull Request | +--\x3e | Wait CI |\n+--------------+      +--------------+      +---------+\n")])])]),s("h2",{attrs:{id:"troubleshooting"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#troubleshooting"}},[e._v("#")]),e._v(" Troubleshooting")]),e._v(" "),s("h3",{attrs:{id:"handling-a-repository-without-git-tag"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#handling-a-repository-without-git-tag"}},[e._v("#")]),e._v(" Handling a Repository without Git Tag")]),e._v(" "),s("p",[e._v("Please create an issue on the author's repository for making GitHub releases. The git tag should be a valid semver. To learn how to automate the release process with GitHub actions, please checkout "),s("a",{attrs:{href:"https://medium.com/openupm/how-to-maintain-upm-package-part-2-f352fbf5f87c",target:"_blank",rel:"noopener noreferrer"}},[e._v("this tutorial"),s("OutboundLink")],1),e._v(".")]),e._v(" "),s("h3",{attrs:{id:"handling-duplicated-tags-for-master-and-upm-branches"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#handling-duplicated-tags-for-master-and-upm-branches"}},[e._v("#")]),e._v(" Handling Duplicated Tags for master and upm Branches")]),e._v(" "),s("p",[e._v("A repository may contain duplicated version tags. Likely created by CI tools, one for the master branch, another for the upm branch. i.e")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("1.0.0")]),e._v(" and "),s("code",[e._v("upm/1.1.0")])]),e._v(" "),s("li",[s("code",[e._v("1.0.0")]),e._v(" and "),s("code",[e._v("1.1.0-upm")])]),e._v(" "),s("li",[s("code",[e._v("1.0.0-master")]),e._v(" and "),s("code",[e._v("1.1.0-upm")])])]),e._v(" "),s("p",[e._v("In such cases the tag from the upm branch takes higher priority, another one is ignored.")]),e._v(" "),s("h3",{attrs:{id:"handling-failed-builds"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#handling-failed-builds"}},[e._v("#")]),e._v(" Handling Failed Builds")]),e._v(" "),s("p",[e._v("You can check the failed reason at the build pipelines section on the package detail page. The most common issue is "),s("em",[e._v("version conflict/version exists")]),e._v(", means a package with the same version is already published. The package owner need bump the version with a new GitHub release, or re-tag the existing release. Build pipelines will re-build failed releases if detecting that the related git tag was removed or re-tagged.")]),e._v(" "),s("p",[e._v("However, build pipelines will not rebuild an already succeeded release if detecting that the git tag is removed or retagged. Because it's a bad practice for talking off or replacing an existing release for a public registry. If the intention is to fix something, the package owner is recommended to bump the version with a new git tag. Learn more at "),s("RouterLink",{attrs:{to:"/docs/modifying-upm-package.html#modifying-or-deleting-a-published-version"}},[e._v("modifying or deleting a published version")]),e._v(".")],1),e._v(" "),s("h3",{attrs:{id:"handling-monorepos"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#handling-monorepos"}},[e._v("#")]),e._v(" Handling Monorepos")]),e._v(" "),s("p",[e._v("Monorepos preset multiple packages in a single repository. Usually layout as below,")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("Packages/\n  com.namespace.foo/\n    package.json\n  com.namespace.bar/\n    package.json\n")])])]),s("p",[e._v("For monorepos, multiple package submissions are required. You need submit packages one by one to the OpenUPM platform. Then there're two cases,")]),e._v(" "),s("ul",[s("li",[e._v("If you make a single Github release for each new version, it will just works. Our build pipelines will treat each package submission separately, and locate the relevant package.json to process.")]),e._v(" "),s("li",[e._v("If you make separate GitHub releases for each new version, you need use a git tag prefix for each package. i.e "),s("code",[e._v("com.namespace.bar/1.0.0")]),e._v(" and "),s("code",[e._v("com.namespace.foo/1.0.0")]),e._v(". Then fill the "),s("code",[e._v("gitTagPrefix")]),e._v(" field of the package YAML file. i.e package "),s("code",[e._v("com.namespace.bar")]),e._v(" should have "),s("code",[e._v('gitTagPrefix: "com.namespace.bar/"')]),e._v(", to avoid wasting resources of build pipelines.")])]),e._v(" "),s("h3",{attrs:{id:"handling-custom-build-pipelines"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#handling-custom-build-pipelines"}},[e._v("#")]),e._v(" Handling Custom Build-Pipelines")]),e._v(" "),s("p",[e._v("OpenUPM doesn't support custom build-pipelines. As a workaround, we suggest leaving the work to CI like GitHub Actions.")]),e._v(" "),s("ul",[s("li",[e._v("For minimal customizations like moving the sample folder, you can build the content into a upm branch (a build branch), then tag the upm branch as a versioned Git tag for OpenUPM to consume.")]),e._v(" "),s("li",[e._v("For deeper customizations like building DLLS you can push build content into another (build) repository, then submit that build repository to OpenUPM.")])])])}),[],!1,null,null,null);a.default=r.exports},820:function(e,a,t){e.exports=t.p+"assets/img/package-add-form.7752681a.png"}}]);